{"version":3,"file":"637.07a94fe9.js","mappings":";qPAYaA,GAAqBC,EAAAA,EAAAA,MAChC,SAAAC,GAAoB,IAAjBC,EAAUD,EAAVC,WACKC,GAAWC,EAAAA,EAAAA,KACjBC,GAAwDC,EAAAA,EAAAA,GACtD,SAACC,GAAK,OAAKA,EAAMC,QAAQ,GADnBC,EAAUJ,EAAVI,WAGAC,GAH2CL,EAA/BM,gBAGNC,EAAAA,EAAAA,MAANF,GAEFG,GAAmBC,EAAAA,EAAAA,aACvB,SAACC,GAQC,MAP4C,CAC1C,cAAeL,EAAE,yBACjBM,aAAcN,EAAE,2BAChB,aAAcA,EAAE,wBAChB,cAAeA,EAAE,yBACjB,gBAAiBA,EAAE,4BAEFK,IAAeA,CACpC,EACA,CAACL,IAGGO,GAAsBH,EAAAA,EAAAA,aAC1B,SAACC,GACCZ,EAASe,EAAAA,EAAgBC,kBAAkBJ,IAE3CZ,EAASiB,EAAAA,EAAeC,cAC1B,EACA,CAAClB,IAGGmB,GAAIC,EAAAA,EAAAA,GAAA,GAAMC,EAAAA,GAAsBtB,GAEtC,OACEuB,EAAAA,EAAAA,KAAA,OAAKC,UAAWF,EAAAA,GAAkBG,UAChCF,EAAAA,EAAAA,KAAA,MAAIC,WAAWE,EAAAA,EAAAA,IAAWJ,EAAAA,GAAaF,GAAMK,SAC1ClB,EAAWoB,IAAI,SAACrB,GAAQ,OACvBiB,EAAAA,EAAAA,KAAA,MAAsBC,UAAWF,EAAAA,GAAYG,UAC3CF,EAAAA,EAAAA,KAAA,UACEC,WAAWE,EAAAA,EAAAA,IAAWJ,EAAAA,IAAaD,EAAAA,EAAAA,GAAA,GAChCC,EAAAA,GAAgBhB,EAASsB,WAE5BC,QAAS,WAAF,OAAQd,EAAoBT,EAASwB,GAAG,EAACL,SAE/Cd,EAAiBL,EAASwB,OAPtBxB,EAASwB,GASb,MAKf,GAGFjC,EAAmBkC,YAAc,oB","sources":["webpack://test-task-foodstore/./src/widgets/CategoryNavigation/ui/CategoryNavigation.tsx"],"sourcesContent":["// src/widgets/category-navigation/ui/CategoryNavigation.tsx\nimport React, { memo, useCallback } from 'react';\nimport { classNames, useTranslation } from '@/shared/lib';\nimport * as styles from './CategoryNavigation.module.scss';\nimport { useAppSelector, useAppDispatch } from '@/app/store/hooks';\nimport { categoryActions } from '@/entities/category';\nimport { productActions } from '@/entities/product';\n\ninterface CategoryNavigationProps {\n  isCartOpen: boolean;\n}\n\nexport const CategoryNavigation = memo<CategoryNavigationProps>(\n  ({ isCartOpen }) => {\n    const dispatch = useAppDispatch();\n    const { categories, activeCategory: _activeCategory } = useAppSelector(\n      (state) => state.category,\n    );\n    const { t } = useTranslation();\n\n    const getCategoryLabel = useCallback(\n      (categoryId: string) => {\n        const categoryMap: Record<string, string> = {\n          'baked-rolls': t('navigation.bakedRolls'),\n          philadelphia: t('navigation.philadelphia'),\n          'cold-rolls': t('navigation.coldRolls'),\n          'fried-rolls': t('navigation.friedRolls'),\n          'sushi-gunkans': t('navigation.sushiGunkans'),\n        };\n        return categoryMap[categoryId] || categoryId;\n      },\n      [t],\n    );\n\n    const handleCategoryClick = useCallback(\n      (categoryId: string) => {\n        dispatch(categoryActions.setActiveCategory(categoryId));\n        // Очищаем поиск при смене категории\n        dispatch(productActions.clearSearch());\n      },\n      [dispatch],\n    );\n\n    const mods = { [styles['cart-open']]: isCartOpen };\n\n    return (\n      <nav className={styles.navigation}>\n        <ul className={classNames(styles.list, mods)}>\n          {categories.map((category) => (\n            <li key={category.id} className={styles.item}>\n              <button\n                className={classNames(styles.button, {\n                  [styles.active]: category.isActive,\n                })}\n                onClick={() => handleCategoryClick(category.id)}\n              >\n                {getCategoryLabel(category.id)}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </nav>\n    );\n  },\n);\n\nCategoryNavigation.displayName = 'CategoryNavigation';\n"],"names":["CategoryNavigation","memo","_ref","isCartOpen","dispatch","useAppDispatch","_useAppSelector","useAppSelector","state","category","categories","t","activeCategory","useTranslation","getCategoryLabel","useCallback","categoryId","philadelphia","handleCategoryClick","categoryActions","setActiveCategory","productActions","clearSearch","mods","_defineProperty","styles","_jsx","className","children","classNames","map","isActive","onClick","id","displayName"],"sourceRoot":""}