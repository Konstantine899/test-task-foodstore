{"version":3,"file":"890.cb4fa91b.js","mappings":";4LAEIA,EAAK,W,uCCUIC,GAAcC,EAAAA,EAAAA,MAAuB,SAAAC,GAAoB,IAAjBC,EAAUD,EAAVC,WAC7CC,GAAWC,EAAAA,EAAAA,KACjBC,GAA+DC,EAAAA,EAAAA,GAC7D,SAACC,GAAK,OAAKA,EAAMC,OAAO,GADlBC,EAAQJ,EAARI,SAAUC,EAAgBL,EAAhBK,iBAAkBC,EAAWN,EAAXM,YAAaC,EAASP,EAATO,UAGzCC,GAAmBP,EAAAA,EAAAA,GAAe,SAACC,GAAK,OAAKA,EAAMO,QAAQ,GAA3DD,eAEFE,GAAiBC,EAAAA,EAAAA,SAAQ,WAC7B,OAAIL,GAAeD,EAAiBO,OAAS,EACpCP,EAGLC,GAA2C,IAA5BD,EAAiBO,OAC3B,GAGc,QAAnBJ,EACKJ,EAEFA,EAASS,OAAO,SAACV,GAAO,OAAKA,EAAQM,WAAaD,CAAc,EACzE,EAAG,CAACJ,EAAUC,EAAkBC,EAAaE,IAEvCM,GAAkBC,EAAAA,EAAAA,aACtB,SAACC,GACC,IAAMb,EAAUC,EAASa,KAAK,SAACC,GAAC,OAAKA,EAAEC,KAAOH,CAAS,GACnDb,GACFL,EACEsB,EAAAA,GAAYC,QAAQ,CAClBF,GAAIhB,EAAQgB,GACZG,KAAMnB,EAAQmB,KACdC,MAAOpB,EAAQoB,MACfC,SAAU,IAIlB,EACA,CAAC1B,EAAUM,IAGPqB,GAAIC,EAAAA,EAAAA,GAAA,GDlDH,WCkD+B7B,GAEhC8B,GAAgBhB,EAAAA,EAAAA,SACpB,kBACEiB,MAAMC,KAAK,CAAEjB,OAAQ,GAAK,SAACkB,EAAGC,GAAK,OACjCC,EAAAA,EAAAA,KAACC,EAAAA,GAAmB,eAAAC,OAAkBH,GAAW,EACjD,EACJ,IAGF,OAAIxB,GACKyB,EAAAA,EAAAA,KAAA,OAAKG,WAAWC,EAAAA,EAAAA,IAAWC,EAAaZ,GAAMa,SAAEX,KAIvDK,EAAAA,EAAAA,KAAA,OAAKG,WAAWC,EAAAA,EAAAA,IAAWC,EAAaZ,GAAMa,SAC3C5B,EAAe6B,IAAI,SAACpC,GAAO,OAC1B6B,EAAAA,EAAAA,KAACQ,EAAAA,GAAW,CAEVrC,QAASA,EACTsC,YAAa3B,GAFRX,EAAQgB,GAGb,IAIV,GAEAzB,EAAYgD,YAAc,a","sources":["webpack://test-task-foodstore/./src/widgets/ProductGrid/ui/ProductGrid.module.scss","webpack://test-task-foodstore/./src/widgets/ProductGrid/ui/ProductGrid.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nvar _1 = \"MS44gci2\";\nvar _2 = \"ZrGzSXVc\";\nexport { _1 as \"cart-open\", _2 as \"grid\" }\n","// src/widgets/product-grid/ui/ProductGrid.tsx\nimport React, { memo, useCallback, useMemo } from 'react';\nimport { classNames } from '@/shared/lib';\nimport * as styles from './ProductGrid.module.scss';\nimport { useAppSelector, useAppDispatch } from '@/app/store/hooks';\nimport { cartActions } from '@/entities/cart';\nimport { ProductCard, ProductCardSkeleton } from '@/shared/ui';\n\ninterface ProductGridProps {\n  isCartOpen: boolean;\n}\n\nexport const ProductGrid = memo<ProductGridProps>(({ isCartOpen }) => {\n  const dispatch = useAppDispatch();\n  const { products, filteredProducts, searchQuery, isLoading } = useAppSelector(\n    (state) => state.product,\n  );\n  const { activeCategory } = useAppSelector((state) => state.category);\n\n  const productsToShow = useMemo(() => {\n    if (searchQuery && filteredProducts.length > 0) {\n      return filteredProducts;\n    }\n\n    if (searchQuery && filteredProducts.length === 0) {\n      return [];\n    }\n\n    if (activeCategory === 'all') {\n      return products;\n    }\n    return products.filter((product) => product.category === activeCategory);\n  }, [products, filteredProducts, searchQuery, activeCategory]);\n\n  const handleAddToCart = useCallback(\n    (productId: string) => {\n      const product = products.find((p) => p.id === productId);\n      if (product) {\n        dispatch(\n          cartActions.addItem({\n            id: product.id,\n            name: product.name,\n            price: product.price,\n            quantity: 1,\n          }),\n        );\n      }\n    },\n    [dispatch, products],\n  );\n\n  const mods = { [styles['cart-open']]: isCartOpen };\n\n  const skeletonItems = useMemo(\n    () =>\n      Array.from({ length: 8 }, (_, index) => (\n        <ProductCardSkeleton key={`skeleton-${index}`} />\n      )),\n    [],\n  );\n\n  if (isLoading) {\n    return <div className={classNames(styles.grid, mods)}>{skeletonItems}</div>;\n  }\n\n  return (\n    <div className={classNames(styles.grid, mods)}>\n      {productsToShow.map((product) => (\n        <ProductCard\n          key={product.id}\n          product={product}\n          onAddToCart={handleAddToCart}\n        />\n      ))}\n    </div>\n  );\n});\n\nProductGrid.displayName = 'ProductGrid';\n"],"names":["_2","ProductGrid","memo","_ref","isCartOpen","dispatch","useAppDispatch","_useAppSelector","useAppSelector","state","product","products","filteredProducts","searchQuery","isLoading","activeCategory","category","productsToShow","useMemo","length","filter","handleAddToCart","useCallback","productId","find","p","id","cartActions","addItem","name","price","quantity","mods","_defineProperty","skeletonItems","Array","from","_","index","_jsx","ProductCardSkeleton","concat","className","classNames","styles","children","map","ProductCard","onAddToCart","displayName"],"sourceRoot":""}