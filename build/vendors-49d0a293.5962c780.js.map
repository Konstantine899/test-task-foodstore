{"version":3,"file":"vendors-49d0a293.5962c780.js","mappings":";uJAIA,SAASA,EAAeC,EAAGC,GACzB,OCLF,SAAyBD,GACvB,GAAIE,MAAMC,QAAQH,GAAI,OAAOA,CAC/B,CDGS,CAAeA,IELxB,SAA+BA,EAAGI,GAChC,IAAIC,EAAI,MAAQL,EAAI,KAAO,oBAAsBM,QAAUN,EAAEM,OAAOC,WAAaP,EAAE,cACnF,GAAI,MAAQK,EAAG,CACb,IAAIJ,EACFO,EACAC,EACAC,EACAC,EAAI,GACJC,GAAI,EACJC,GAAI,EACN,IACE,GAAIJ,GAAKJ,EAAIA,EAAES,KAAKd,IAAIe,KAAM,IAAMX,EAAG,CACrC,GAAIY,OAAOX,KAAOA,EAAG,OACrBO,GAAI,CACN,MAAO,OAASA,GAAKX,EAAIQ,EAAEK,KAAKT,IAAIY,QAAUN,EAAEO,KAAKjB,EAAEkB,OAAQR,EAAES,SAAWhB,GAAIQ,GAAI,GACtF,CAAE,MAAOZ,GACPa,GAAI,EAAIL,EAAIR,CACd,CAAE,QACA,IACE,IAAKY,GAAK,MAAQP,EAAU,SAAMK,EAAIL,EAAU,SAAKW,OAAON,KAAOA,GAAI,MACzE,CAAE,QACA,GAAIG,EAAG,MAAML,CACf,CACF,CACA,OAAOG,CACT,CACF,CFrB8B,CAAqBX,EAAGC,KAAM,EAAAoB,EAAA,GAA2BrB,EAAGC,IGL1F,WACE,MAAM,IAAIqB,UAAU,4IACtB,CHGgG,EAChG,C,iBINA,SAASC,EAAkBvB,EAAGW,IAC3B,MAAQA,GAAKA,EAAIX,EAAEoB,UAAYT,EAAIX,EAAEoB,QACtC,IAAK,IAAInB,EAAI,EAAGO,EAAIN,MAAMS,GAAIV,EAAIU,EAAGV,IAAKO,EAAEP,GAAKD,EAAEC,GACnD,OAAOO,CACT,C,iCCHA,SAASgB,EAAyBvB,EAAGI,GACnC,GAAI,MAAQJ,EAAG,MAAO,CAAC,EACvB,IAAIY,EACFb,EACAS,ECLJ,SAAuCT,EAAGC,GACxC,GAAI,MAAQD,EAAG,MAAO,CAAC,EACvB,IAAIK,EAAI,CAAC,EACT,IAAK,IAAIG,KAAKR,EAAG,GAAI,CAAC,EAAEyB,eAAeX,KAAKd,EAAGQ,GAAI,CACjD,IAAK,IAAMP,EAAEyB,QAAQlB,GAAI,SACzBH,EAAEG,GAAKR,EAAEQ,EACX,CACA,OAAOH,CACT,CDHQ,CAA6BJ,EAAGI,GACtC,GAAIW,OAAOW,sBAAuB,CAChC,IAAInB,EAAIQ,OAAOW,sBAAsB1B,GACrC,IAAKD,EAAI,EAAGA,EAAIQ,EAAEY,OAAQpB,IAAKa,EAAIL,EAAER,IAAK,IAAMK,EAAEqB,QAAQb,IAAM,CAAC,EAAEe,qBAAqBd,KAAKb,EAAGY,KAAOJ,EAAEI,GAAKZ,EAAEY,GAClH,CACA,OAAOJ,CACT,C,kDEXA,SAASoB,EAAQhB,GAGf,OAAOgB,EAAU,mBAAqBvB,QAAU,iBAAmBA,OAAOC,SAAW,SAAUM,GAC7F,cAAcA,CAChB,EAAI,SAAUA,GACZ,OAAOA,GAAK,mBAAqBP,QAAUO,EAAEiB,cAAgBxB,QAAUO,IAAMP,OAAOyB,UAAY,gBAAkBlB,CACpH,EAAGgB,EAAQhB,EACb,CCPA,SAASmB,EAAgB/B,EAAGD,EAAGK,GAC7B,OAAQL,ECAV,SAAuBK,GACrB,IAAII,ECFN,SAAqBJ,GACnB,GAAI,UAAYwB,EAAQxB,KAAOA,EAAG,OAAOA,EACzC,IAAIJ,EAAII,EAAEC,OAAO2B,aACjB,QAAI,IAAWhC,EAAG,CAChB,IAAIQ,EAAIR,EAAEa,KAAKT,EAAGL,UAClB,GAAI,UAAY6B,EAAQpB,GAAI,OAAOA,EACnC,MAAM,IAAIa,UAAU,+CACtB,CACA,OAAyBY,OAAiB7B,EAC5C,CDPU4B,CAAY5B,GACpB,MAAO,UAAYwB,EAAQpB,GAAKA,EAAIA,EAAI,EAC1C,CDHc0B,CAAcnC,MAAOC,EAAIe,OAAOoB,eAAenC,EAAGD,EAAG,CAC/DmB,MAAOd,EACPgC,YAAY,EACZC,cAAc,EACdC,UAAU,IACPtC,EAAED,GAAKK,EAAGJ,CACjB,C,0EGJA,SAASuC,EAAmBxC,GAC1B,OCJF,SAA4BA,GAC1B,GAAIE,MAAMC,QAAQH,GAAI,OAAO,EAAAyC,EAAA,GAAiBzC,EAChD,CDES,CAAkBA,IEL3B,SAA0BA,GACxB,GAAI,oBAAsBM,QAAU,MAAQN,EAAEM,OAAOC,WAAa,MAAQP,EAAE,cAAe,OAAOE,MAAMwC,KAAK1C,EAC/G,CFGiC,CAAgBA,KAAM,EAAAqB,EAAA,GAA2BrB,IGLlF,WACE,MAAM,IAAIsB,UAAU,uIACtB,CHGwF,EACxF,C,uGIHA,SAASqB,EAA2BC,EAAMC,EAAWC,GACnD,IAAI,UACFC,EAAS,SACTC,GACEJ,EACJ,MAAMK,GAAW,QAAYJ,GACvBK,GAAgB,QAAiBL,GACjCM,GAAc,QAAcD,GAC5BE,GAAO,QAAQP,GACfQ,EAA0B,MAAbJ,EACbK,EAAUP,EAAUQ,EAAIR,EAAUS,MAAQ,EAAIR,EAASQ,MAAQ,EAC/DC,EAAUV,EAAUW,EAAIX,EAAUY,OAAS,EAAIX,EAASW,OAAS,EACjEC,EAAcb,EAAUI,GAAe,EAAIH,EAASG,GAAe,EACzE,IAAIU,EACJ,OAAQT,GACN,IAAK,MACHS,EAAS,CACPN,EAAGD,EACHI,EAAGX,EAAUW,EAAIV,EAASW,QAE5B,MACF,IAAK,SACHE,EAAS,CACPN,EAAGD,EACHI,EAAGX,EAAUW,EAAIX,EAAUY,QAE7B,MACF,IAAK,QACHE,EAAS,CACPN,EAAGR,EAAUQ,EAAIR,EAAUS,MAC3BE,EAAGD,GAEL,MACF,IAAK,OACHI,EAAS,CACPN,EAAGR,EAAUQ,EAAIP,EAASQ,MAC1BE,EAAGD,GAEL,MACF,QACEI,EAAS,CACPN,EAAGR,EAAUQ,EACbG,EAAGX,EAAUW,GAGnB,QAAQ,QAAab,IACnB,IAAK,QACHgB,EAAOX,IAAkBU,GAAed,GAAOO,GAAc,EAAI,GACjE,MACF,IAAK,MACHQ,EAAOX,IAAkBU,GAAed,GAAOO,GAAc,EAAI,GAGrE,OAAOQ,CACT,CAqGAC,eAAeC,EAAeC,EAAOC,GACnC,IAAIC,OACY,IAAZD,IACFA,EAAU,CAAC,GAEb,MAAM,EACJV,EAAC,EACDG,EAAC,SACDS,EAAQ,MACRC,EAAK,SACLC,EAAQ,SACRC,GACEN,GACE,SACJO,EAAW,oBAAmB,aAC9BC,EAAe,WAAU,eACzBC,EAAiB,WAAU,YAC3BC,GAAc,EAAK,QACnBC,EAAU,IACR,QAASV,EAASD,GAChBY,GAAgB,QAAiBD,GAEjCE,EAAUR,EAASK,EADa,aAAnBD,EAAgC,YAAc,WACbA,GAC9CK,GAAqB,cAAuBX,EAASY,gBAAgB,CACzEF,QAAiH,OAAtGX,QAAqD,MAAtBC,EAASa,eAAoB,EAASb,EAASa,UAAUH,MAAqBX,EAAgCW,EAAUA,EAAQI,sBAAyD,MAA/Bd,EAASe,wBAA6B,EAASf,EAASe,mBAAmBb,EAASrB,WACxRuB,WACAC,eACAF,cAEIa,EAA0B,aAAnBV,EAAgC,CAC3ClB,IACAG,IACAF,MAAOY,EAAMpB,SAASQ,MACtBG,OAAQS,EAAMpB,SAASW,QACrBS,EAAMrB,UACJqC,QAAkD,MAA5BjB,EAASkB,qBAA0B,EAASlB,EAASkB,gBAAgBhB,EAASrB,WACpGsC,QAA4C,MAAtBnB,EAASa,eAAoB,EAASb,EAASa,UAAUI,WAA+C,MAArBjB,EAASoB,cAAmB,EAASpB,EAASoB,SAASH,KAGlK,CACF7B,EAAG,EACHG,EAAG,GAEC8B,GAAoB,QAAiBrB,EAASsB,4DAA8DtB,EAASsB,sDAAsD,CAC/KpB,WACAc,OACAC,eACAd,aACGa,GACL,MAAO,CACLO,KAAMZ,EAAmBY,IAAMF,EAAkBE,IAAMd,EAAcc,KAAOJ,EAAY5B,EACxFiC,QAASH,EAAkBG,OAASb,EAAmBa,OAASf,EAAce,QAAUL,EAAY5B,EACpGkC,MAAOd,EAAmBc,KAAOJ,EAAkBI,KAAOhB,EAAcgB,MAAQN,EAAY/B,EAC5FsC,OAAQL,EAAkBK,MAAQf,EAAmBe,MAAQjB,EAAciB,OAASP,EAAY/B,EAEpG,CAoaA,MAmGMuC,EAA2B,IAAIC,IAAI,CAAC,OAAQ,Q,cCvtBlD,SAASC,EAAiBnB,GACxB,MAAMoB,GAAM,QAAmBpB,GAG/B,IAAIrB,EAAQ0C,WAAWD,EAAIzC,QAAU,EACjCG,EAASuC,WAAWD,EAAItC,SAAW,EACvC,MAAMwC,GAAY,QAActB,GAC1BuB,EAAcD,EAAYtB,EAAQuB,YAAc5C,EAChD6C,EAAeF,EAAYtB,EAAQwB,aAAe1C,EAClD2C,GAAiB,QAAM9C,KAAW4C,IAAe,QAAMzC,KAAY0C,EAKzE,OAJIC,IACF9C,EAAQ4C,EACRzC,EAAS0C,GAEJ,CACL7C,QACAG,SACA4C,EAAGD,EAEP,CAEA,SAASE,EAAc3B,GACrB,OAAQ,QAAUA,GAAoCA,EAAzBA,EAAQI,cACvC,CAEA,SAASM,EAASV,GAChB,MAAM4B,EAAaD,EAAc3B,GACjC,KAAK,QAAc4B,GACjB,OAAO,QAAa,GAEtB,MAAMtB,EAAOsB,EAAWC,yBAClB,MACJlD,EAAK,OACLG,EAAM,EACN4C,GACEP,EAAiBS,GACrB,IAAIlD,GAAKgD,GAAI,QAAMpB,EAAK3B,OAAS2B,EAAK3B,OAASA,EAC3CE,GAAK6C,GAAI,QAAMpB,EAAKxB,QAAUwB,EAAKxB,QAAUA,EAUjD,OANKJ,GAAMoD,OAAOC,SAASrD,KACzBA,EAAI,GAEDG,GAAMiD,OAAOC,SAASlD,KACzBA,EAAI,GAEC,CACLH,IACAG,IAEJ,CAEA,MAAMmD,GAAyB,QAAa,GAC5C,SAASC,EAAiBjC,GACxB,MAAMkC,GAAM,QAAUlC,GACtB,OAAK,WAAekC,EAAIC,eAGjB,CACLzD,EAAGwD,EAAIC,eAAeC,WACtBvD,EAAGqD,EAAIC,eAAeE,WAJfL,CAMX,CAWA,SAASH,EAAsB7B,EAASsC,EAAcC,EAAiBhC,QAChD,IAAjB+B,IACFA,GAAe,QAEO,IAApBC,IACFA,GAAkB,GAEpB,MAAMC,EAAaxC,EAAQ6B,wBACrBD,EAAaD,EAAc3B,GACjC,IAAIyC,GAAQ,QAAa,GACrBH,IACE/B,GACE,QAAUA,KACZkC,EAAQ/B,EAASH,IAGnBkC,EAAQ/B,EAASV,IAGrB,MAAM0C,EA7BR,SAAgC1C,EAAS2C,EAASC,GAIhD,YAHgB,IAAZD,IACFA,GAAU,MAEPC,GAAwBD,GAAWC,KAAyB,QAAU5C,KAGpE2C,CACT,CAqBwBE,CAAuBjB,EAAYW,EAAiBhC,GAAgB0B,EAAiBL,IAAc,QAAa,GACtI,IAAIlD,GAAK8D,EAAWzB,KAAO2B,EAAchE,GAAK+D,EAAM/D,EAChDG,GAAK2D,EAAW3B,IAAM6B,EAAc7D,GAAK4D,EAAM5D,EAC/CF,EAAQ6D,EAAW7D,MAAQ8D,EAAM/D,EACjCI,EAAS0D,EAAW1D,OAAS2D,EAAM5D,EACvC,GAAI+C,EAAY,CACd,MAAMM,GAAM,QAAUN,GAChBkB,EAAYvC,IAAgB,QAAUA,IAAgB,QAAUA,GAAgBA,EACtF,IAAIwC,EAAab,EACbc,GAAgB,QAAgBD,GACpC,KAAOC,GAAiBzC,GAAgBuC,IAAcC,GAAY,CAChE,MAAME,EAAcvC,EAASsC,GACvBE,EAAaF,EAAcnB,wBAC3BT,GAAM,QAAmB4B,GACzBjC,EAAOmC,EAAWnC,MAAQiC,EAAcG,WAAa9B,WAAWD,EAAIgC,cAAgBH,EAAYvE,EAChGmC,EAAMqC,EAAWrC,KAAOmC,EAAcK,UAAYhC,WAAWD,EAAIkC,aAAeL,EAAYpE,EAClGH,GAAKuE,EAAYvE,EACjBG,GAAKoE,EAAYpE,EACjBF,GAASsE,EAAYvE,EACrBI,GAAUmE,EAAYpE,EACtBH,GAAKqC,EACLlC,GAAKgC,EACLkC,GAAa,QAAUC,GACvBA,GAAgB,QAAgBD,EAClC,CACF,CACA,OAAO,QAAiB,CACtBpE,QACAG,SACAJ,IACAG,KAEJ,CAIA,SAAS0E,EAAoBvD,EAASM,GACpC,MAAMkD,GAAa,QAAcxD,GAASyD,WAC1C,OAAKnD,EAGEA,EAAKS,KAAOyC,EAFV3B,GAAsB,QAAmB7B,IAAUe,KAAOyC,CAGrE,CAEA,SAASE,EAAcC,EAAiBC,GACtC,MAAMC,EAAWF,EAAgB9B,wBAGjC,MAAO,CACLnD,EAHQmF,EAAS9C,KAAO6C,EAAOH,WAAaF,EAAoBI,EAAiBE,GAIjFhF,EAHQgF,EAAShD,IAAM+C,EAAOE,UAKlC,CAkHA,MAAMC,EAA+B,IAAI7C,IAAI,CAAC,WAAY,UAkB1D,SAAS8C,EAAkChE,EAASiE,EAAkBxE,GACpE,IAAIa,EACJ,GAAyB,aAArB2D,EACF3D,EAhEJ,SAAyBN,EAASP,GAChC,MAAMyC,GAAM,QAAUlC,GAChBkE,GAAO,QAAmBlE,GAC1BmC,EAAiBD,EAAIC,eAC3B,IAAIxD,EAAQuF,EAAKC,YACbrF,EAASoF,EAAKE,aACd1F,EAAI,EACJG,EAAI,EACR,GAAIsD,EAAgB,CAClBxD,EAAQwD,EAAexD,MACvBG,EAASqD,EAAerD,OACxB,MAAMuF,GAAsB,YACvBA,GAAuBA,GAAoC,UAAb5E,KACjDf,EAAIyD,EAAeC,WACnBvD,EAAIsD,EAAeE,UAEvB,CACA,MAAMiC,EAAmBf,EAAoBW,GAI7C,GAAII,GAAoB,EAAG,CACzB,MAAMC,EAAML,EAAKM,cACXC,EAAOF,EAAIE,KACXC,EAAaC,iBAAiBF,GAC9BG,EAAsC,eAAnBL,EAAIM,YAA8BxD,WAAWqD,EAAWI,YAAczD,WAAWqD,EAAWK,cAAoB,EACnIC,EAA+BC,KAAKC,IAAIhB,EAAKC,YAAcM,EAAKN,YAAcS,GAChFI,GA5Bc,KA6BhBrG,GAASqG,EAEb,MAAWV,GA/BS,KAkClB3F,GAAS2F,GAEX,MAAO,CACL3F,QACAG,SACAJ,IACAG,IAEJ,CAuBWsG,CAAgBnF,EAASP,QAC3B,GAAyB,aAArBwE,EACT3D,EAzFJ,SAAyBN,GACvB,MAAMkE,GAAO,QAAmBlE,GAC1B4D,GAAS,QAAc5D,GACvByE,EAAOzE,EAAQwE,cAAcC,KAC7B9F,GAAQ,QAAIuF,EAAKkB,YAAalB,EAAKC,YAAaM,EAAKW,YAAaX,EAAKN,aACvErF,GAAS,QAAIoF,EAAKmB,aAAcnB,EAAKE,aAAcK,EAAKY,aAAcZ,EAAKL,cACjF,IAAI1F,GAAKkF,EAAOH,WAAaF,EAAoBvD,GACjD,MAAMnB,GAAK+E,EAAOE,UAIlB,MAH2C,SAAvC,QAAmBW,GAAMa,YAC3B5G,IAAK,QAAIwF,EAAKC,YAAaM,EAAKN,aAAexF,GAE1C,CACLA,QACAG,SACAJ,IACAG,IAEJ,CAwEW0G,EAAgB,QAAmBvF,SACrC,IAAI,QAAUiE,GACnB3D,EAvBJ,SAAoCN,EAASP,GAC3C,MAAM+C,EAAaX,EAAsB7B,GAAS,EAAmB,UAAbP,GAClDoB,EAAM2B,EAAW3B,IAAMb,EAAQqD,UAC/BtC,EAAOyB,EAAWzB,KAAOf,EAAQmD,WACjCV,GAAQ,QAAczC,GAAWU,EAASV,IAAW,QAAa,GAKxE,MAAO,CACLrB,MALYqB,EAAQmE,YAAc1B,EAAM/D,EAMxCI,OALakB,EAAQoE,aAAe3B,EAAM5D,EAM1CH,EALQqC,EAAO0B,EAAM/D,EAMrBG,EALQgC,EAAM4B,EAAM5D,EAOxB,CAQW2G,CAA2BvB,EAAkBxE,OAC/C,CACL,MAAMiD,EAAgBT,EAAiBjC,GACvCM,EAAO,CACL5B,EAAGuF,EAAiBvF,EAAIgE,EAAchE,EACtCG,EAAGoF,EAAiBpF,EAAI6D,EAAc7D,EACtCF,MAAOsF,EAAiBtF,MACxBG,OAAQmF,EAAiBnF,OAE7B,CACA,OAAO,QAAiBwB,EAC1B,CACA,SAASmF,EAAyBzF,EAAS0F,GACzC,MAAMC,GAAa,QAAc3F,GACjC,QAAI2F,IAAeD,KAAa,QAAUC,KAAe,QAAsBA,MAG5B,WAA5C,QAAmBA,GAAYC,UAAwBH,EAAyBE,EAAYD,GACrG,CA2EA,SAASG,EAA8B7F,EAASO,EAAcd,GAC5D,MAAMqG,GAA0B,QAAcvF,GACxCoD,GAAkB,QAAmBpD,GACrCoC,EAAuB,UAAblD,EACVa,EAAOuB,EAAsB7B,GAAS,EAAM2C,EAASpC,GAC3D,IAAIqD,EAAS,CACXH,WAAY,EACZK,UAAW,GAEb,MAAMiC,GAAU,QAAa,GAI7B,SAASC,IACPD,EAAQrH,EAAI6E,EAAoBI,EAClC,CACA,GAAImC,IAA4BA,IAA4BnD,EAI1D,IAHkC,UAA9B,QAAYpC,KAA4B,QAAkBoD,MAC5DC,GAAS,QAAcrD,IAErBuF,EAAyB,CAC3B,MAAMG,EAAapE,EAAsBtB,GAAc,EAAMoC,EAASpC,GACtEwF,EAAQrH,EAAIuH,EAAWvH,EAAI6B,EAAa4C,WACxC4C,EAAQlH,EAAIoH,EAAWpH,EAAI0B,EAAa8C,SAC1C,MAAWM,GACTqC,IAGArD,IAAYmD,GAA2BnC,GACzCqC,IAEF,MAAME,GAAavC,GAAoBmC,GAA4BnD,GAAmD,QAAa,GAAtDe,EAAcC,EAAiBC,GAG5G,MAAO,CACLlF,EAHQ4B,EAAKS,KAAO6C,EAAOH,WAAasC,EAAQrH,EAAIwH,EAAWxH,EAI/DG,EAHQyB,EAAKO,IAAM+C,EAAOE,UAAYiC,EAAQlH,EAAIqH,EAAWrH,EAI7DF,MAAO2B,EAAK3B,MACZG,OAAQwB,EAAKxB,OAEjB,CAEA,SAASqH,EAAmBnG,GAC1B,MAAgD,YAAzC,QAAmBA,GAAS4F,QACrC,CAEA,SAASQ,EAAoBpG,EAASqG,GACpC,KAAK,QAAcrG,IAAqD,WAAzC,QAAmBA,GAAS4F,SACzD,OAAO,KAET,GAAIS,EACF,OAAOA,EAASrG,GAElB,IAAIsG,EAAkBtG,EAAQO,aAS9B,OAHI,QAAmBP,KAAasG,IAClCA,EAAkBA,EAAgB9B,cAAcC,MAE3C6B,CACT,CAIA,SAAS9F,EAAgBR,EAASqG,GAChC,MAAMnE,GAAM,QAAUlC,GACtB,IAAI,QAAWA,GACb,OAAOkC,EAET,KAAK,QAAclC,GAAU,CAC3B,IAAIuG,GAAkB,QAAcvG,GACpC,KAAOuG,KAAoB,QAAsBA,IAAkB,CACjE,IAAI,QAAUA,KAAqBJ,EAAmBI,GACpD,OAAOA,EAETA,GAAkB,QAAcA,EAClC,CACA,OAAOrE,CACT,CACA,IAAI3B,EAAe6F,EAAoBpG,EAASqG,GAChD,KAAO9F,IAAgB,QAAeA,IAAiB4F,EAAmB5F,IACxEA,EAAe6F,EAAoB7F,EAAc8F,GAEnD,OAAI9F,IAAgB,QAAsBA,IAAiB4F,EAAmB5F,MAAkB,QAAkBA,GACzG2B,EAEF3B,IAAgB,QAAmBP,IAAYkC,CACxD,CAqBA,MAAM5C,EAAW,CACfsB,sDAtVF,SAA+D7C,GAC7D,IAAI,SACFyB,EAAQ,KACRc,EAAI,aACJC,EAAY,SACZd,GACE1B,EACJ,MAAM4E,EAAuB,UAAblD,EACVkE,GAAkB,QAAmBpD,GACrCiG,IAAWhH,IAAW,QAAWA,EAASrB,UAChD,GAAIoC,IAAiBoD,GAAmB6C,GAAY7D,EAClD,OAAOrC,EAET,IAAIsD,EAAS,CACXH,WAAY,EACZK,UAAW,GAETrB,GAAQ,QAAa,GACzB,MAAMsD,GAAU,QAAa,GACvBD,GAA0B,QAAcvF,GAC9C,IAAIuF,IAA4BA,IAA4BnD,MACxB,UAA9B,QAAYpC,KAA4B,QAAkBoD,MAC5DC,GAAS,QAAcrD,KAErB,QAAcA,IAAe,CAC/B,MAAM0F,EAAapE,EAAsBtB,GACzCkC,EAAQ/B,EAASH,GACjBwF,EAAQrH,EAAIuH,EAAWvH,EAAI6B,EAAa4C,WACxC4C,EAAQlH,EAAIoH,EAAWpH,EAAI0B,EAAa8C,SAC1C,CAEF,MAAM6C,GAAavC,GAAoBmC,GAA4BnD,GAAmD,QAAa,GAAtDe,EAAcC,EAAiBC,GAC5G,MAAO,CACLjF,MAAO2B,EAAK3B,MAAQ8D,EAAM/D,EAC1BI,OAAQwB,EAAKxB,OAAS2D,EAAM5D,EAC5BH,EAAG4B,EAAK5B,EAAI+D,EAAM/D,EAAIkF,EAAOH,WAAahB,EAAM/D,EAAIqH,EAAQrH,EAAIwH,EAAWxH,EAC3EG,EAAGyB,EAAKzB,EAAI4D,EAAM5D,EAAI+E,EAAOE,UAAYrB,EAAM5D,EAAIkH,EAAQlH,EAAIqH,EAAWrH,EAE9E,EAiTEwB,mBAAkB,KAClBH,gBAvJF,SAAyBnC,GACvB,IAAI,QACFiC,EAAO,SACPN,EAAQ,aACRC,EAAY,SACZF,GACE1B,EACJ,MACM0I,EAAoB,IADoB,sBAAb/G,GAAmC,QAAWM,GAAW,GAxC5F,SAAqCA,EAAS0G,GAC5C,MAAMC,EAAeD,EAAME,IAAI5G,GAC/B,GAAI2G,EACF,OAAOA,EAET,IAAIE,GAAS,QAAqB7G,EAAS,IAAI,GAAO8G,OAAOC,IAAM,QAAUA,IAA2B,UAApB,QAAYA,IAC5FC,EAAsC,KAC1C,MAAMC,EAA0D,WAAzC,QAAmBjH,GAAS4F,SACnD,IAAIsB,EAAcD,GAAiB,QAAcjH,GAAWA,EAG5D,MAAO,QAAUkH,MAAiB,QAAsBA,IAAc,CACpE,MAAMC,GAAgB,QAAmBD,GACnCE,GAA0B,QAAkBF,GAC7CE,GAAsD,UAA3BD,EAAcvB,WAC5CoB,EAAsC,OAEVC,GAAkBG,IAA4BJ,GAAuCI,GAAsD,WAA3BD,EAAcvB,UAA2BoB,GAAuCjD,EAAgBsD,IAAIL,EAAoCpB,YAAa,QAAkBsB,KAAiBE,GAA2B3B,EAAyBzF,EAASkH,IAGjYL,EAASA,EAAOC,OAAOQ,GAAYA,IAAaJ,GAGhDF,EAAsCG,EAExCD,GAAc,QAAcA,EAC9B,CAEA,OADAR,EAAMa,IAAIvH,EAAS6G,GACZA,CACT,CAWiGW,CAA4BxH,EAASyH,KAAKC,IAAM,GAAGC,OAAOjI,GACjGC,GAClDiI,EAAwBnB,EAAkB,GAC1CoB,EAAepB,EAAkBqB,OAAO,CAACC,EAAS9D,KACtD,MAAM3D,EAAO0D,EAAkChE,EAASiE,EAAkBxE,GAK1E,OAJAsI,EAAQlH,KAAM,QAAIP,EAAKO,IAAKkH,EAAQlH,KACpCkH,EAAQ/G,OAAQ,QAAIV,EAAKU,MAAO+G,EAAQ/G,OACxC+G,EAAQjH,QAAS,QAAIR,EAAKQ,OAAQiH,EAAQjH,QAC1CiH,EAAQhH,MAAO,QAAIT,EAAKS,KAAMgH,EAAQhH,MAC/BgH,GACN/D,EAAkChE,EAAS4H,EAAuBnI,IACrE,MAAO,CACLd,MAAOkJ,EAAa7G,MAAQ6G,EAAa9G,KACzCjC,OAAQ+I,EAAa/G,OAAS+G,EAAahH,IAC3CnC,EAAGmJ,EAAa9G,KAChBlC,EAAGgJ,EAAahH,IAEpB,EAgIEL,kBACAwH,gBAxBsB/I,eAAgBgJ,GACtC,MAAMC,EAAoBT,KAAKjH,iBAAmBA,EAC5C2H,EAAkBV,KAAKW,cACvBC,QAA2BF,EAAgBF,EAAK9J,UACtD,MAAO,CACLD,UAAW2H,EAA8BoC,EAAK/J,gBAAiBgK,EAAkBD,EAAK9J,UAAW8J,EAAKxI,UACtGtB,SAAU,CACRO,EAAG,EACHG,EAAG,EACHF,MAAO0J,EAAmB1J,MAC1BG,OAAQuJ,EAAmBvJ,QAGjC,EAYEwJ,eAnTF,SAAwBtI,GACtB,OAAO3E,MAAMwC,KAAKmC,EAAQsI,iBAC5B,EAkTEF,cAjIF,SAAuBpI,GACrB,MAAM,MACJrB,EAAK,OACLG,GACEqC,EAAiBnB,GACrB,MAAO,CACLrB,QACAG,SAEJ,EAyHE4B,WACAP,UAAS,KACToI,MAdF,SAAevI,GACb,MAAiD,SAA1C,QAAmBA,GAASsF,SACrC,GAeA,SAASkD,EAAc1M,EAAG2M,GACxB,OAAO3M,EAAE4C,IAAM+J,EAAE/J,GAAK5C,EAAE+C,IAAM4J,EAAE5J,GAAK/C,EAAE6C,QAAU8J,EAAE9J,OAAS7C,EAAEgD,SAAW2J,EAAE3J,MAC7E,CAkGA,SAAS4J,EAAWxK,EAAWC,EAAUwK,EAAQvJ,QAC/B,IAAZA,IACFA,EAAU,CAAC,GAEb,MAAM,eACJwJ,GAAiB,EAAI,eACrBC,GAAiB,EAAI,cACrBC,EAA0C,mBAAnBC,eAA6B,YACpDC,EAA8C,mBAAzBC,qBAAmC,eACxDC,GAAiB,GACf9J,EACE+J,EAAcxH,EAAczD,GAC5BkL,EAAYR,GAAkBC,EAAiB,IAAKM,GAAc,QAAqBA,GAAe,OAAQ,QAAqBhL,IAAa,GACtJiL,EAAUC,QAAQ/B,IAChBsB,GAAkBtB,EAASgC,iBAAiB,SAAUX,EAAQ,CAC5DY,SAAS,IAEXV,GAAkBvB,EAASgC,iBAAiB,SAAUX,KAExD,MAAMa,EAAYL,GAAeH,EAlHnC,SAAqBhJ,EAASyJ,GAC5B,IACIC,EADAC,EAAK,KAET,MAAMC,GAAO,QAAmB5J,GAChC,SAAS6J,IACP,IAAIC,EACJC,aAAaL,GACC,OAAbI,EAAMH,IAAeG,EAAIE,aAC1BL,EAAK,IACP,CA2EA,OA1EA,SAASM,EAAQC,EAAMC,QACR,IAATD,IACFA,GAAO,QAES,IAAdC,IACFA,EAAY,GAEdN,IACA,MAAMO,EAA2BpK,EAAQ6B,yBACnC,KACJd,EAAI,IACJF,EAAG,MACHlC,EAAK,OACLG,GACEsL,EAIJ,GAHKF,GACHT,KAEG9K,IAAUG,EACb,OAEF,MAKMM,EAAU,CACdiL,aANe,QAAMxJ,GAIQ,QAHZ,QAAM+I,EAAKzF,aAAepD,EAAOpC,IAGC,QAFjC,QAAMiL,EAAKxF,cAAgBvD,EAAM/B,IAEuB,QAD1D,QAAMiC,GACyE,KAG/FoJ,WAAW,QAAI,GAAG,QAAI,EAAGA,KAAe,GAE1C,IAAIG,GAAgB,EACpB,SAASC,EAAcC,GACrB,MAAMC,EAAQD,EAAQ,GAAGE,kBACzB,GAAID,IAAUN,EAAW,CACvB,IAAKG,EACH,OAAOL,IAEJQ,EAOHR,GAAQ,EAAOQ,GAJff,EAAYiB,WAAW,KACrBV,GAAQ,EAAO,OACd,IAIP,CACc,IAAVQ,GAAgBjC,EAAc4B,EAA0BpK,EAAQ6B,0BAQlEoI,IAEFK,GAAgB,CAClB,CAIA,IACEX,EAAK,IAAIV,qBAAqBsB,EAAe,IACxCnL,EAEHwK,KAAMA,EAAKpF,eAEf,CAAE,MAAOoG,GACPjB,EAAK,IAAIV,qBAAqBsB,EAAenL,EAC/C,CACAuK,EAAGkB,QAAQ7K,EACb,CACAiK,EAAQ,GACDJ,CACT,CA6BiDiB,CAAY3B,EAAaR,GAAU,KAClF,IAsBIoC,EAtBAC,GAAkB,EAClBC,EAAiB,KACjBnC,IACFmC,EAAiB,IAAIlC,eAAehL,IAClC,IAAKmN,GAAcnN,EACfmN,GAAcA,EAAWC,SAAWhC,GAAe8B,IAGrDA,EAAeG,UAAUjN,GACzBkN,qBAAqBL,GACrBA,EAAiBM,sBAAsB,KACrC,IAAIC,EACkC,OAArCA,EAAkBN,IAA2BM,EAAgBV,QAAQ1M,MAG1EwK,MAEEQ,IAAgBD,GAClB+B,EAAeJ,QAAQ1B,GAEzB8B,EAAeJ,QAAQ1M,IAGzB,IAAIqN,EAActC,EAAiBrH,EAAsB3D,GAAa,KAatE,OAZIgL,GAGJ,SAASuC,IACP,MAAMC,EAAc7J,EAAsB3D,GACtCsN,IAAgBhD,EAAcgD,EAAaE,IAC7C/C,IAEF6C,EAAcE,EACdX,EAAUO,sBAAsBG,EAClC,CATEA,GAUF9C,IACO,KACL,IAAIgD,EACJvC,EAAUC,QAAQ/B,IAChBsB,GAAkBtB,EAASsE,oBAAoB,SAAUjD,GACzDE,GAAkBvB,EAASsE,oBAAoB,SAAUjD,KAE9C,MAAba,GAAqBA,IACkB,OAAtCmC,EAAmBV,IAA2BU,EAAiB3B,aAChEiB,EAAiB,KACb/B,GACFmC,qBAAqBN,GAG3B,CAUA,MAAM,EAAiB7L,EASjB,ED0FS,SAAUE,GAIvB,YAHgB,IAAZA,IACFA,EAAU,GAEL,CACLyM,KAAM,SACNzM,UACA,QAAM0M,CAAG3M,GACP,IAAI4M,EAAuBC,EAC3B,MAAM,EACJtN,EAAC,EACDG,EAAC,UACDb,EAAS,eACTiO,GACE9M,EACE+M,QA9DZjN,eAAoCE,EAAOC,GACzC,MAAM,UACJpB,EAAS,SACTsB,EAAQ,SACRE,GACEL,EACElB,QAA+B,MAAlBqB,EAASiJ,WAAgB,EAASjJ,EAASiJ,MAAM/I,EAASrB,WACvEI,GAAO,QAAQP,GACfmO,GAAY,QAAanO,GACzBQ,EAAwC,OAA3B,QAAYR,GACzBoO,EAAgBnL,EAAYoG,IAAI9I,IAAS,EAAI,EAC7C8N,EAAiBpO,GAAOO,GAAc,EAAI,EAC1C8N,GAAW,QAASlN,EAASD,GAGnC,IAAI,SACFoN,EAAQ,UACRC,EAAS,cACTnO,GACsB,iBAAbiO,EAAwB,CACjCC,SAAUD,EACVE,UAAW,EACXnO,cAAe,MACb,CACFkO,SAAUD,EAASC,UAAY,EAC/BC,UAAWF,EAASE,WAAa,EACjCnO,cAAeiO,EAASjO,eAK1B,OAHI8N,GAAsC,iBAAlB9N,IACtBmO,EAA0B,QAAdL,GAAuC,EAAjB9N,EAAqBA,GAElDG,EAAa,CAClBE,EAAG8N,EAAYH,EACfxN,EAAG0N,EAAWH,GACZ,CACF1N,EAAG6N,EAAWH,EACdvN,EAAG2N,EAAYH,EAEnB,CAwB+BI,CAAqBtN,EAAOC,GAIrD,OAAIpB,KAAkE,OAAlD+N,EAAwBE,EAAeS,aAAkB,EAASX,EAAsB/N,YAAgE,OAAjDgO,EAAwBC,EAAeU,QAAkBX,EAAsBY,gBACjM,CAAC,EAEH,CACLlO,EAAGA,EAAIwN,EAAWxN,EAClBG,EAAGA,EAAIqN,EAAWrN,EAClBoJ,KAAM,IACDiE,EACHlO,aAGN,EAEJ,EC3GM,EDkHQ,SAAUoB,GAItB,YAHgB,IAAZA,IACFA,EAAU,CAAC,GAEN,CACLyM,KAAM,QACNzM,UACA,QAAM0M,CAAG3M,GACP,MAAM,EACJT,EAAC,EACDG,EAAC,UACDb,GACEmB,GAEFoN,SAAUM,GAAgB,EAC1BL,UAAWM,GAAiB,EAAK,QACjCC,EAAU,CACRjB,GAAI/N,IACF,IAAI,EACFW,EAAC,EACDG,GACEd,EACJ,MAAO,CACLW,IACAG,UAIHmO,IACD,QAAS5N,EAASD,GAChBH,EAAS,CACbN,IACAG,KAEIoO,QAAiB/N,EAAeC,EAAO6N,GACvCR,GAAY,SAAY,QAAQxO,IAChCuO,GAAW,QAAgBC,GACjC,IAAIU,EAAgBlO,EAAOuN,GACvBY,EAAiBnO,EAAOwN,GAC5B,GAAIK,EAAe,CACjB,MACMO,EAAuB,MAAbb,EAAmB,SAAW,QACxCc,EAAMH,EAAgBD,EAFC,MAAbV,EAAmB,MAAQ,QAGrCe,EAAMJ,EAAgBD,EAASG,GACrCF,GAAgB,QAAMG,EAAKH,EAAeI,EAC5C,CACA,GAAIR,EAAgB,CAClB,MACMM,EAAwB,MAAdZ,EAAoB,SAAW,QACzCa,EAAMF,EAAiBF,EAFC,MAAdT,EAAoB,MAAQ,QAGtCc,EAAMH,EAAiBF,EAASG,GACtCD,GAAiB,QAAME,EAAKF,EAAgBG,EAC9C,CACA,MAAMC,EAAgBR,EAAQjB,GAAG,IAC5B3M,EACH,CAACoN,GAAWW,EACZ,CAACV,GAAYW,IAEf,MAAO,IACFI,EACHtF,KAAM,CACJvJ,EAAG6O,EAAc7O,EAAIA,EACrBG,EAAG0O,EAAc1O,EAAIA,EACrB2O,QAAS,CACP,CAACjB,GAAWM,EACZ,CAACL,GAAYM,IAIrB,EAEJ,ECjLM,EDvTO,SAAU1N,GAIrB,YAHgB,IAAZA,IACFA,EAAU,CAAC,GAEN,CACLyM,KAAM,OACNzM,UACA,QAAM0M,CAAG3M,GACP,IAAI6M,EAAuByB,EAC3B,MAAM,UACJzP,EAAS,eACTiO,EAAc,MACd1M,EAAK,iBACLmO,EAAgB,SAChBpO,EAAQ,SACRE,GACEL,GAEFoN,SAAUM,GAAgB,EAC1BL,UAAWM,GAAiB,EAC5Ba,mBAAoBC,EAA2B,iBAC/CC,EAAmB,UAAS,0BAC5BC,EAA4B,OAAM,cAClCC,GAAgB,KACbf,IACD,QAAS5N,EAASD,GAMtB,GAAsD,OAAjD6M,EAAwBC,EAAeU,QAAkBX,EAAsBY,gBAClF,MAAO,CAAC,EAEV,MAAMrO,GAAO,QAAQP,GACfgQ,GAAkB,QAAYN,GAC9BO,GAAkB,QAAQP,KAAsBA,EAChDzP,QAA+B,MAAlBqB,EAASiJ,WAAgB,EAASjJ,EAASiJ,MAAM/I,EAASrB,WACvEwP,EAAqBC,IAAgCK,IAAoBF,EAAgB,EAAC,QAAqBL,KAAqB,QAAsBA,IAC1JQ,EAA6D,SAA9BJ,GAChCF,GAA+BM,GAClCP,EAAmBtR,SAAQ,QAA0BqR,EAAkBK,EAAeD,EAA2B7P,IAEnH,MAAMkQ,EAAa,CAACT,KAAqBC,GACnCV,QAAiB/N,EAAeC,EAAO6N,GACvCoB,EAAY,GAClB,IAAIC,GAAiE,OAA/CZ,EAAuBxB,EAAeqC,WAAgB,EAASb,EAAqBW,YAAc,GAIxH,GAHIvB,GACFuB,EAAU/R,KAAK4Q,EAAS1O,IAEtBuO,EAAgB,CAClB,MAAMyB,GAAQ,QAAkBvQ,EAAWuB,EAAOtB,GAClDmQ,EAAU/R,KAAK4Q,EAASsB,EAAM,IAAKtB,EAASsB,EAAM,IACpD,CAOA,GANAF,EAAgB,IAAIA,EAAe,CACjCrQ,YACAoQ,eAIGA,EAAUI,MAAMjQ,GAAQA,GAAQ,GAAI,CACvC,IAAIkQ,EAAuBC,EAC3B,MAAMC,IAA+D,OAAhDF,EAAwBxC,EAAeqC,WAAgB,EAASG,EAAsBG,QAAU,GAAK,EACpHC,EAAgBV,EAAWQ,GACjC,GAAIE,IACiD,cAAnB/B,GAAiCkB,KAAoB,QAAYa,IAIjGR,EAAcG,MAAMM,IAAK,QAAYA,EAAE9Q,aAAegQ,GAAkBc,EAAEV,UAAU,GAAK,IAEvF,MAAO,CACLnG,KAAM,CACJ2G,MAAOD,EACPP,UAAWC,GAEbU,MAAO,CACL/Q,UAAW6Q,IAQnB,IAAIG,EAAgJ,OAA9HN,EAAwBL,EAAcvH,OAAOgI,GAAKA,EAAEV,UAAU,IAAM,GAAGa,KAAK,CAACnT,EAAG2M,IAAM3M,EAAEsS,UAAU,GAAK3F,EAAE2F,UAAU,IAAI,SAAc,EAASM,EAAsB1Q,UAG1L,IAAKgR,EACH,OAAQnB,GACN,IAAK,UACH,CACE,IAAIqB,EACJ,MAAMlR,EASmJ,OATtIkR,EAAyBb,EAAcvH,OAAOgI,IAC/D,GAAIZ,EAA8B,CAChC,MAAMiB,GAAkB,QAAYL,EAAE9Q,WACtC,OAAOmR,IAAoBnB,GAGP,MAApBmB,CACF,CACA,OAAO,IACNC,IAAIN,GAAK,CAACA,EAAE9Q,UAAW8Q,EAAEV,UAAUtH,OAAOmG,GAAYA,EAAW,GAAGnF,OAAO,CAACuH,EAAKpC,IAAaoC,EAAMpC,EAAU,KAAKgC,KAAK,CAACnT,EAAG2M,IAAM3M,EAAE,GAAK2M,EAAE,IAAI,SAAc,EAASyG,EAAuB,GAC5LlR,IACFgR,EAAiBhR,GAEnB,KACF,CACF,IAAK,mBACHgR,EAAiBtB,EAIvB,GAAI1P,IAAcgR,EAChB,MAAO,CACLD,MAAO,CACL/Q,UAAWgR,GAInB,CACA,MAAO,CAAC,CACV,EAEJ,ECmMM,EDqPO,SAAU5P,GAIrB,YAHgB,IAAZA,IACFA,EAAU,CAAC,GAEN,CACLyM,KAAM,OACNzM,UACA,QAAM0M,CAAG3M,GACP,IAAImQ,EAAuBC,EAC3B,MAAM,UACJvR,EAAS,MACTuB,EAAK,SACLD,EAAQ,SACRE,GACEL,GACE,MACJqQ,EAAQ,UACLxC,IACD,QAAS5N,EAASD,GAChB8N,QAAiB/N,EAAeC,EAAO6N,GACvCzO,GAAO,QAAQP,GACfmO,GAAY,QAAanO,GACzByR,EAAqC,OAA3B,QAAYzR,IACtB,MACJW,EAAK,OACLG,GACES,EAAMpB,SACV,IAAIuR,EACAC,EACS,QAATpR,GAA2B,WAATA,GACpBmR,EAAanR,EACboR,EAAYxD,WAAyC,MAAlB7M,EAASiJ,WAAgB,EAASjJ,EAASiJ,MAAM/I,EAASrB,WAAc,QAAU,OAAS,OAAS,UAEvIwR,EAAYpR,EACZmR,EAA2B,QAAdvD,EAAsB,MAAQ,UAE7C,MAAMyD,EAAwB9Q,EAASmO,EAASpM,IAAMoM,EAASnM,OACzD+O,EAAuBlR,EAAQsO,EAASlM,KAAOkM,EAASjM,MACxD8O,GAA0B,QAAIhR,EAASmO,EAASyC,GAAaE,GAC7DG,GAAyB,QAAIpR,EAAQsO,EAAS0C,GAAYE,GAC1DG,GAAW7Q,EAAM8M,eAAegE,MACtC,IAAIC,EAAkBJ,EAClBK,EAAiBJ,EAOrB,GAN4D,OAAvDT,EAAwBnQ,EAAM8M,eAAegE,QAAkBX,EAAsB9B,QAAQ9O,IAChGyR,EAAiBN,GAE0C,OAAxDN,EAAyBpQ,EAAM8M,eAAegE,QAAkBV,EAAuB/B,QAAQ3O,IAClGqR,EAAkBN,GAEhBI,IAAY7D,EAAW,CACzB,MAAMiE,GAAO,QAAInD,EAASlM,KAAM,GAC1BsP,GAAO,QAAIpD,EAASjM,MAAO,GAC3BsP,GAAO,QAAIrD,EAASpM,IAAK,GACzB0P,GAAO,QAAItD,EAASnM,OAAQ,GAC9B2O,EACFU,EAAiBxR,EAAQ,GAAc,IAATyR,GAAuB,IAATC,EAAaD,EAAOC,GAAO,QAAIpD,EAASlM,KAAMkM,EAASjM,QAEnGkP,EAAkBpR,EAAS,GAAc,IAATwR,GAAuB,IAATC,EAAaD,EAAOC,GAAO,QAAItD,EAASpM,IAAKoM,EAASnM,QAExG,OACM0O,EAAM,IACPrQ,EACHgR,iBACAD,oBAEF,MAAMM,QAAuBlR,EAAS8I,cAAc5I,EAASrB,UAC7D,OAAIQ,IAAU6R,EAAe7R,OAASG,IAAW0R,EAAe1R,OACvD,CACLiQ,MAAO,CACLxP,OAAO,IAIN,CAAC,CACV,EAEJ,ECjSM,EAAkB,CAACrB,EAAWC,EAAUiB,KAI5C,MAAMsH,EAAQ,IAAI+J,IACZC,EAAgB,CACpBpR,cACGF,GAECuR,EAAoB,IACrBD,EAAcpR,SACjBoI,GAAIhB,GAEN,MDhsBsBzH,OAAOf,EAAWC,EAAUyS,KAClD,MAAM,UACJ5S,EAAY,SAAQ,SACpByB,EAAW,WAAU,WACrBoR,EAAa,GAAE,SACfvR,GACEsR,EACEE,EAAkBD,EAAW/J,OAAOiK,SACpC9S,QAA+B,MAAlBqB,EAASiJ,WAAgB,EAASjJ,EAASiJ,MAAMpK,IACpE,IAAIoB,QAAcD,EAAS0I,gBAAgB,CACzC9J,YACAC,WACAsB,cAEE,EACFf,EAAC,EACDG,GACEf,EAA2ByB,EAAOvB,EAAWC,GAC7C+S,EAAoBhT,EACpBiO,EAAiB,CAAC,EAClBgF,EAAa,EACjB,IAAK,IAAIrV,EAAI,EAAGA,EAAIkV,EAAgBvU,OAAQX,IAAK,CAC/C,MAAM,KACJiQ,EAAI,GACJC,GACEgF,EAAgBlV,IAElB8C,EAAGwS,EACHrS,EAAGsS,EAAK,KACRlJ,EAAI,MACJ8G,SACQjD,EAAG,CACXpN,IACAG,IACA6O,iBAAkB1P,EAClBA,UAAWgT,EACXvR,WACAwM,iBACA1M,QACAD,WACAE,SAAU,CACRtB,YACAC,cAGJO,EAAa,MAATwS,EAAgBA,EAAQxS,EAC5BG,EAAa,MAATsS,EAAgBA,EAAQtS,EAC5BoN,EAAiB,IACZA,EACH,CAACJ,GAAO,IACHI,EAAeJ,MACf5D,IAGH8G,GAASkC,GAAc,KACzBA,IACqB,iBAAVlC,IACLA,EAAM/Q,YACRgT,EAAoBjC,EAAM/Q,WAExB+Q,EAAMxP,QACRA,GAAwB,IAAhBwP,EAAMxP,YAAuBD,EAAS0I,gBAAgB,CAC5D9J,YACAC,WACAsB,aACGsP,EAAMxP,SAGXb,IACAG,KACEf,EAA2ByB,EAAOyR,EAAmB/S,KAE3DrC,GAAK,EAET,CACA,MAAO,CACL8C,IACAG,IACAb,UAAWgT,EACXvR,WACAwM,mBCgnBKmF,CAAkBlT,EAAWC,EAAU,IACzCuS,EACHpR,SAAUqR,I,gDCnwBd,SAASU,EAA4BlW,EAAGW,GACtC,GAAIX,EAAG,CACL,GAAI,iBAAmBA,EAAG,OAAO,OAAiBA,EAAGW,GACrD,IAAIN,EAAI,CAAC,EAAE8V,SAASrV,KAAKd,GAAGoW,MAAM,GAAI,GACtC,MAAO,WAAa/V,GAAKL,EAAE8B,cAAgBzB,EAAIL,EAAE8B,YAAY4O,MAAO,QAAUrQ,GAAK,QAAUA,EAAIH,MAAMwC,KAAK1C,GAAK,cAAgBK,GAAK,2CAA2CgW,KAAKhW,IAAK,OAAiBL,EAAGW,QAAK,CACtN,CACF,C","sources":["webpack://test-task-foodstore/./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://test-task-foodstore/./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://test-task-foodstore/./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://test-task-foodstore/./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://test-task-foodstore/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://test-task-foodstore/./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack://test-task-foodstore/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://test-task-foodstore/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://test-task-foodstore/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://test-task-foodstore/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://test-task-foodstore/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://test-task-foodstore/./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack://test-task-foodstore/./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack://test-task-foodstore/./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack://test-task-foodstore/./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack://test-task-foodstore/./node_modules/@floating-ui/core/dist/floating-ui.core.mjs","webpack://test-task-foodstore/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs","webpack://test-task-foodstore/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js"],"sourcesContent":["import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nfunction _slicedToArray(r, e) {\n  return arrayWithHoles(r) || iterableToArrayLimit(r, e) || unsupportedIterableToArray(r, e) || nonIterableRest();\n}\nexport { _slicedToArray as default };","function _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nexport { _arrayWithHoles as default };","function _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nexport { _iterableToArrayLimit as default };","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _nonIterableRest as default };","function _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nexport { _arrayLikeToArray as default };","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nexport { _objectWithoutProperties as default };","function _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nexport { _objectWithoutPropertiesLoose as default };","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nfunction _toConsumableArray(r) {\n  return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();\n}\nexport { _toConsumableArray as default };","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return arrayLikeToArray(r);\n}\nexport { _arrayWithoutHoles as default };","function _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nexport { _iterableToArray as default };","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _nonIterableSpread as default };","import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    x,\n    y,\n    width: rects.floating.width,\n    height: rects.floating.height\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const initialSideAxis = getSideAxis(initialPlacement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== 'none';\n      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          const ignoreCrossAxisOverflow = checkCrossAxis === 'alignment' ? initialSideAxis !== getSideAxis(nextPlacement) : false;\n          if (!ignoreCrossAxisOverflow ||\n          // We leave the current main axis only if every placement on that axis\n          // overflows the main axis.\n          overflowsData.every(d => getSideAxis(d.placement) === initialSideAxis ? d.overflows[0] > 0 : true)) {\n            // Try next placement and re-run the lifecycle.\n            return {\n              data: {\n                index: nextIndex,\n                overflows: overflowsData\n              },\n              reset: {\n                placement: nextPlacement\n              }\n            };\n          }\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$filter2;\n                const placement = (_overflowsData$filter2 = overflowsData.filter(d => {\n                  if (hasFallbackAxisSideDirection) {\n                    const currentSideAxis = getSideAxis(d.placement);\n                    return currentSideAxis === initialSideAxis ||\n                    // Create a bias to the `y` side axis due to horizontal\n                    // reading directions favoring greater width.\n                    currentSideAxis === 'y';\n                  }\n                  return true;\n                }).map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nconst originSides = /*#__PURE__*/new Set(['left', 'top']);\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = originSides.has(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: rawValue.mainAxis || 0,\n    crossAxis: rawValue.crossAxis || 0,\n    alignmentAxis: rawValue.alignmentAxis\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y,\n          enabled: {\n            [mainAxis]: checkMainAxis,\n            [crossAxis]: checkCrossAxis\n          }\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = originSides.has(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      var _state$middlewareData, _state$middlewareData2;\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const maximumClippingHeight = height - overflow.top - overflow.bottom;\n      const maximumClippingWidth = width - overflow.left - overflow.right;\n      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {\n        availableWidth = maximumClippingWidth;\n      }\n      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {\n        availableHeight = maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n","import { rectToClientRect, arrow as arrow$1, autoPlacement as autoPlacement$1, detectOverflow as detectOverflow$1, flip as flip$1, hide as hide$1, inline as inline$1, limitShift as limitShift$1, offset as offset$1, shift as shift$1, size as size$1, computePosition as computePosition$1 } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle as getComputedStyle$1, isHTMLElement, isElement, getWindow, isWebKit, getFrameElement, getNodeScroll, getDocumentElement, isTopLayer, getNodeName, isOverflowElement, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle$1(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = getFrameElement(currentWin);\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle$1(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = getFrameElement(currentWin);\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\n// If <html> has a CSS width greater than the viewport, then this will be\n// incorrect for RTL.\nfunction getWindowScrollBarX(element, rect) {\n  const leftScroll = getNodeScroll(element).scrollLeft;\n  if (!rect) {\n    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;\n  }\n  return rect.left + leftScroll;\n}\n\nfunction getHTMLOffset(documentElement, scroll) {\n  const htmlRect = documentElement.getBoundingClientRect();\n  const x = htmlRect.left + scroll.scrollLeft - getWindowScrollBarX(documentElement, htmlRect);\n  const y = htmlRect.top + scroll.scrollTop;\n  return {\n    x,\n    y\n  };\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === 'fixed';\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle$1(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Safety check: ensure the scrollbar space is reasonable in case this\n// calculation is affected by unusual styles.\n// Most scrollbars leave 15-18px of space.\nconst SCROLLBAR_MAX = 25;\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  const windowScrollbarX = getWindowScrollBarX(html);\n  // <html> `overflow: hidden` + `scrollbar-gutter: stable` reduces the\n  // visual width of the <html> but this is not considered in the size\n  // of `html.clientWidth`.\n  if (windowScrollbarX <= 0) {\n    const doc = html.ownerDocument;\n    const body = doc.body;\n    const bodyStyles = getComputedStyle(body);\n    const bodyMarginInline = doc.compatMode === 'CSS1Compat' ? parseFloat(bodyStyles.marginLeft) + parseFloat(bodyStyles.marginRight) || 0 : 0;\n    const clippingStableScrollbarWidth = Math.abs(html.clientWidth - body.clientWidth - bodyMarginInline);\n    if (clippingStableScrollbarWidth <= SCROLLBAR_MAX) {\n      width -= clippingStableScrollbarWidth;\n    }\n  } else if (windowScrollbarX <= SCROLLBAR_MAX) {\n    // If the <body> scrollbar is on the left, the width needs to be extended\n    // by the scrollbar amount so there isn't extra space on the right.\n    width += windowScrollbarX;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nconst absoluteOrFixed = /*#__PURE__*/new Set(['absolute', 'fixed']);\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y,\n      width: clippingAncestor.width,\n      height: clippingAncestor.height\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle$1(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle$1(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle$1(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && absoluteOrFixed.has(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n\n  // If the <body> scrollbar appears on the left (e.g. RTL systems). Use\n  // Firefox with layout.scrollbar.side = 3 in about:config to test this.\n  function setLeftRTLScrollbarOffset() {\n    offsets.x = getWindowScrollBarX(documentElement);\n  }\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      setLeftRTLScrollbarOffset();\n    }\n  }\n  if (isFixed && !isOffsetParentAnElement && documentElement) {\n    setLeftRTLScrollbarOffset();\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);\n  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;\n  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;\n  return {\n    x,\n    y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction isStaticPositioned(element) {\n  return getComputedStyle$1(element).position === 'static';\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle$1(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  let rawOffsetParent = element.offsetParent;\n\n  // Firefox returns the <html> element as the offsetParent if it's non-static,\n  // while Chrome and Safari return the <body> element. The <body> element must\n  // be used to perform the correct calculations even if the <html> element is\n  // non-static.\n  if (getDocumentElement(element) === rawOffsetParent) {\n    rawOffsetParent = rawOffsetParent.ownerDocument.body;\n  }\n  return rawOffsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const win = getWindow(element);\n  if (isTopLayer(element)) {\n    return win;\n  }\n  if (!isHTMLElement(element)) {\n    let svgOffsetParent = getParentNode(element);\n    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {\n      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n        return svgOffsetParent;\n      }\n      svgOffsetParent = getParentNode(svgOffsetParent);\n    }\n    return win;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n    return win;\n  }\n  return offsetParent || getContainingBlock(element) || win;\n}\n\nconst getElementRects = async function (data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  const floatingDimensions = await getDimensionsFn(data.floating);\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      width: floatingDimensions.width,\n      height: floatingDimensions.height\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle$1(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\nfunction rectsAreEqual(a, b) {\n  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;\n}\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    var _io;\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const elementRectForRootMargin = element.getBoundingClientRect();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = elementRectForRootMargin;\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          // If the reference is clipped, the ratio is 0. Throttle the refresh\n          // to prevent an infinite loop of updates.\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 1000);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {\n        // It's possible that even though the ratio is reported as 1, the\n        // element is not actually fully within the IntersectionObserver's root\n        // area anymore. This can happen under performance constraints. This may\n        // be a bug in the browser's IntersectionObserver implementation. To\n        // work around this, we compare the element's bounding rect now with\n        // what it was at the time we created the IntersectionObserver. If they\n        // are not equal then the element moved, so we refresh.\n        refresh();\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (_e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _resizeObserver2;\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nconst detectOverflow = detectOverflow$1;\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = offset$1;\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = autoPlacement$1;\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = shift$1;\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = flip$1;\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = size$1;\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = hide$1;\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = arrow$1;\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = inline$1;\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = limitShift$1;\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, platform, shift, size };\n","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;\n  }\n}\nexport { _unsupportedIterableToArray as default };"],"names":["_slicedToArray","r","e","Array","isArray","l","t","Symbol","iterator","n","i","u","a","f","o","call","next","Object","done","push","value","length","unsupportedIterableToArray","TypeError","_arrayLikeToArray","_objectWithoutProperties","hasOwnProperty","indexOf","getOwnPropertySymbols","propertyIsEnumerable","_typeof","constructor","prototype","_defineProperty","toPrimitive","String","toPropertyKey","defineProperty","enumerable","configurable","writable","_toConsumableArray","arrayLikeToArray","from","computeCoordsFromPlacement","_ref","placement","rtl","reference","floating","sideAxis","alignmentAxis","alignLength","side","isVertical","commonX","x","width","commonY","y","height","commonAlign","coords","async","detectOverflow","state","options","_await$platform$isEle","platform","rects","elements","strategy","boundary","rootBoundary","elementContext","altBoundary","padding","paddingObject","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","rect","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","top","bottom","left","right","originSides","Set","getCssDimensions","css","parseFloat","hasOffset","offsetWidth","offsetHeight","shouldFallback","$","unwrapElement","domElement","getBoundingClientRect","Number","isFinite","noOffsets","getVisualOffsets","win","visualViewport","offsetLeft","offsetTop","includeScale","isFixedStrategy","clientRect","scale","visualOffsets","isFixed","floatingOffsetParent","shouldAddVisualOffsets","offsetWin","currentWin","currentIFrame","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","getWindowScrollBarX","leftScroll","scrollLeft","getHTMLOffset","documentElement","scroll","htmlRect","scrollTop","absoluteOrFixed","getClientRectFromClippingAncestor","clippingAncestor","html","clientWidth","clientHeight","visualViewportBased","windowScrollbarX","doc","ownerDocument","body","bodyStyles","getComputedStyle","bodyMarginInline","compatMode","marginLeft","marginRight","clippingStableScrollbarWidth","Math","abs","getViewportRect","scrollWidth","scrollHeight","direction","getDocumentRect","getInnerBoundingClientRect","hasFixedPositionAncestor","stopNode","parentNode","position","getRectRelativeToOffsetParent","isOffsetParentAnElement","offsets","setLeftRTLScrollbarOffset","offsetRect","htmlOffset","isStaticPositioned","getTrueOffsetParent","polyfill","rawOffsetParent","svgOffsetParent","topLayer","clippingAncestors","cache","cachedResult","get","result","filter","el","currentContainingBlockComputedStyle","elementIsFixed","currentNode","computedStyle","currentNodeIsContaining","has","ancestor","set","getClippingElementAncestors","this","_c","concat","firstClippingAncestor","clippingRect","reduce","accRect","getElementRects","data","getOffsetParentFn","getDimensionsFn","getDimensions","floatingDimensions","getClientRects","isRTL","rectsAreEqual","b","autoUpdate","update","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","IntersectionObserver","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","onMove","timeoutId","io","root","cleanup","_io","clearTimeout","disconnect","refresh","skip","threshold","elementRectForRootMargin","rootMargin","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","_e","observe","observeMove","frameId","reobserveFrame","resizeObserver","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","_resizeObserver","prevRefRect","frameLoop","nextRefRect","_resizeObserver2","removeEventListener","name","fn","_middlewareData$offse","_middlewareData$arrow","middlewareData","diffCoords","alignment","mainAxisMulti","crossAxisMulti","rawValue","mainAxis","crossAxis","convertValueToCoords","offset","arrow","alignmentOffset","checkMainAxis","checkCrossAxis","limiter","detectOverflowOptions","overflow","mainAxisCoord","crossAxisCoord","maxSide","min","max","limitedCoords","enabled","_middlewareData$flip","initialPlacement","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","initialSideAxis","isBasePlacement","hasFallbackAxisSideDirection","placements","overflows","overflowsData","flip","sides","every","_middlewareData$flip2","_overflowsData$filter","nextIndex","index","nextPlacement","d","reset","resetPlacement","sort","_overflowsData$filter2","currentSideAxis","map","acc","_state$middlewareData","_state$middlewareData2","apply","isYAxis","heightSide","widthSide","maximumClippingHeight","maximumClippingWidth","overflowAvailableHeight","overflowAvailableWidth","noShift","shift","availableHeight","availableWidth","xMin","xMax","yMin","yMax","nextDimensions","Map","mergedOptions","platformWithCache","config","middleware","validMiddleware","Boolean","statefulPlacement","resetCount","nextX","nextY","computePosition","_unsupportedIterableToArray","toString","slice","test"],"sourceRoot":""}